# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type User {
  id: ID!
  isActive: Boolean
  role: Role
  firstName: String
  surname: String
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  isActive: BooleanFilter
  role: RoleWhereInput
  firstName: StringFilter
  surname: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  isActive: OrderDirection
  firstName: OrderDirection
  surname: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  isActive: Boolean
  role: RoleRelateToOneForUpdateInput
  firstName: String
  surname: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  isActive: Boolean
  role: RoleRelateToOneForCreateInput
  firstName: String
  surname: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Intruder {
  id: ID!
  manufacturer: IntruderManufacturerType
  model: String
  code: String
}

enum IntruderManufacturerType {
  Hikvision
  Dahua
  Unbranded
  Pyronix
  Texecom
  Honeywell
  Other
}

input IntruderWhereUniqueInput {
  id: ID
}

input IntruderWhereInput {
  AND: [IntruderWhereInput!]
  OR: [IntruderWhereInput!]
  NOT: [IntruderWhereInput!]
  id: IDFilter
  manufacturer: IntruderManufacturerTypeNullableFilter
  model: StringFilter
  code: StringFilter
}

input IntruderManufacturerTypeNullableFilter {
  equals: IntruderManufacturerType
  in: [IntruderManufacturerType!]
  notIn: [IntruderManufacturerType!]
  not: IntruderManufacturerTypeNullableFilter
}

input IntruderOrderByInput {
  id: OrderDirection
  manufacturer: OrderDirection
  model: OrderDirection
  code: OrderDirection
}

input IntruderUpdateInput {
  manufacturer: IntruderManufacturerType
  model: String
  code: String
}

input IntruderUpdateArgs {
  where: IntruderWhereUniqueInput!
  data: IntruderUpdateInput!
}

input IntruderCreateInput {
  manufacturer: IntruderManufacturerType
  model: String
  code: String
}

type Block {
  id: ID!
  title: String
  content: String
}

input BlockWhereUniqueInput {
  id: ID
}

input BlockWhereInput {
  AND: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  NOT: [BlockWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input BlockOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input BlockUpdateInput {
  title: String
  content: String
}

input BlockUpdateArgs {
  where: BlockWhereUniqueInput!
  data: BlockUpdateInput!
}

input BlockCreateInput {
  title: String
  content: String
}

type Product {
  id: ID!
  discipline: ProductDisciplineType
  manufacturer: Manufacturer
  name: String
  code: String
  info(where: BlockWhereInput! = {}, orderBy: [BlockOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlockWhereUniqueInput): [Block!]
  infoCount(where: BlockWhereInput! = {}): Int
}

enum ProductDisciplineType {
  CCTV
  Intruder
  Fire
  AccessControl
  Other
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  discipline: ProductDisciplineTypeNullableFilter
  manufacturer: ManufacturerWhereInput
  name: StringFilter
  code: StringFilter
  info: BlockManyRelationFilter
}

input ProductDisciplineTypeNullableFilter {
  equals: ProductDisciplineType
  in: [ProductDisciplineType!]
  notIn: [ProductDisciplineType!]
  not: ProductDisciplineTypeNullableFilter
}

input BlockManyRelationFilter {
  every: BlockWhereInput
  some: BlockWhereInput
  none: BlockWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  discipline: OrderDirection
  name: OrderDirection
  code: OrderDirection
}

input ProductUpdateInput {
  discipline: ProductDisciplineType
  manufacturer: ManufacturerRelateToOneForUpdateInput
  name: String
  code: String
  info: BlockRelateToManyForUpdateInput
}

input ManufacturerRelateToOneForUpdateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
  disconnect: Boolean
}

input BlockRelateToManyForUpdateInput {
  disconnect: [BlockWhereUniqueInput!]
  set: [BlockWhereUniqueInput!]
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  discipline: ProductDisciplineType
  manufacturer: ManufacturerRelateToOneForCreateInput
  name: String
  code: String
  info: BlockRelateToManyForCreateInput
}

input ManufacturerRelateToOneForCreateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
}

input BlockRelateToManyForCreateInput {
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

type Manufacturer {
  id: ID!
  name: String
  website: String
  support: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input ManufacturerWhereUniqueInput {
  id: ID
}

input ManufacturerWhereInput {
  AND: [ManufacturerWhereInput!]
  OR: [ManufacturerWhereInput!]
  NOT: [ManufacturerWhereInput!]
  id: IDFilter
  name: StringFilter
  website: StringFilter
  support: StringFilter
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ManufacturerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  website: OrderDirection
  support: OrderDirection
}

input ManufacturerUpdateInput {
  name: String
  website: String
  support: String
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ManufacturerUpdateArgs {
  where: ManufacturerWhereUniqueInput!
  data: ManufacturerUpdateInput!
}

input ManufacturerCreateInput {
  name: String
  website: String
  support: String
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canViewProducts: Boolean
  canCreateProducts: Boolean
  canUpdateProducts: Boolean
  canDeleteProducts: Boolean
  canManageRoles: Boolean
  canManageUsers: Boolean
  canManageManufacturers: Boolean
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canViewProducts: BooleanFilter
  canCreateProducts: BooleanFilter
  canUpdateProducts: BooleanFilter
  canDeleteProducts: BooleanFilter
  canManageRoles: BooleanFilter
  canManageUsers: BooleanFilter
  canManageManufacturers: BooleanFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canViewProducts: OrderDirection
  canCreateProducts: OrderDirection
  canUpdateProducts: OrderDirection
  canDeleteProducts: OrderDirection
  canManageRoles: OrderDirection
  canManageUsers: OrderDirection
  canManageManufacturers: OrderDirection
}

input RoleUpdateInput {
  name: String
  canViewProducts: Boolean
  canCreateProducts: Boolean
  canUpdateProducts: Boolean
  canDeleteProducts: Boolean
  canManageRoles: Boolean
  canManageUsers: Boolean
  canManageManufacturers: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canViewProducts: Boolean
  canCreateProducts: Boolean
  canUpdateProducts: Boolean
  canDeleteProducts: Boolean
  canManageRoles: Boolean
  canManageUsers: Boolean
  canManageManufacturers: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createIntruder(data: IntruderCreateInput!): Intruder
  createIntruders(data: [IntruderCreateInput!]!): [Intruder]
  updateIntruder(where: IntruderWhereUniqueInput!, data: IntruderUpdateInput!): Intruder
  updateIntruders(data: [IntruderUpdateArgs!]!): [Intruder]
  deleteIntruder(where: IntruderWhereUniqueInput!): Intruder
  deleteIntruders(where: [IntruderWhereUniqueInput!]!): [Intruder]
  createBlock(data: BlockCreateInput!): Block
  createBlocks(data: [BlockCreateInput!]!): [Block]
  updateBlock(where: BlockWhereUniqueInput!, data: BlockUpdateInput!): Block
  updateBlocks(data: [BlockUpdateArgs!]!): [Block]
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteBlocks(where: [BlockWhereUniqueInput!]!): [Block]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createManufacturer(data: ManufacturerCreateInput!): Manufacturer
  createManufacturers(data: [ManufacturerCreateInput!]!): [Manufacturer]
  updateManufacturer(where: ManufacturerWhereUniqueInput!, data: ManufacturerUpdateInput!): Manufacturer
  updateManufacturers(data: [ManufacturerUpdateArgs!]!): [Manufacturer]
  deleteManufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  deleteManufacturers(where: [ManufacturerWhereUniqueInput!]!): [Manufacturer]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  intruder(where: IntruderWhereUniqueInput!): Intruder
  intruders(where: IntruderWhereInput! = {}, orderBy: [IntruderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IntruderWhereUniqueInput): [Intruder!]
  intrudersCount(where: IntruderWhereInput! = {}): Int
  block(where: BlockWhereUniqueInput!): Block
  blocks(where: BlockWhereInput! = {}, orderBy: [BlockOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlockWhereUniqueInput): [Block!]
  blocksCount(where: BlockWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  manufacturers(where: ManufacturerWhereInput! = {}, orderBy: [ManufacturerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ManufacturerWhereUniqueInput): [Manufacturer!]
  manufacturersCount(where: ManufacturerWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
